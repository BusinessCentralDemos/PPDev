name: ' Publish To Environment'

on:
  workflow_dispatch:
    inputs:
      appVersion:
        description: App version to deploy to environment(s) (current, prerelease, draft, latest or version number)
        required: false
        default: 'current'
      environmentName:
        description: Environment mask to receive the new version (* for all, PROD* for all environments starting with PROD)
        required: true

permissions:
  contents: read
  actions: read

defaults:
  run:
    shell: powershell

env:
  ALGoOrgSettings: ${{ vars.ALGoOrgSettings }}
  ALGoRepoSettings: ${{ vars.ALGoRepoSettings }}

jobs:
  Initialization:
    runs-on: [ windows-latest ]
    outputs:
      telemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
      settings: ${{ steps.ReadSettings.outputs.SettingsJson }}
      environments: ${{ steps.ReadSettings.outputs.EnvironmentsJson }}
      environmentCount: ${{ steps.ReadSettings.outputs.EnvironmentCount }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialize the workflow
        id: init
        uses: BusinessCentralDemos/AL-Go-Actions/WorkflowInitialize@PowerPlatform
        with:
          shell: powershell
          eventId: "DO0097"

      - name: Read settings
        id: ReadSettings
        uses: BusinessCentralDemos/AL-Go-Actions/ReadSettings@PowerPlatform
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ steps.init.outputs.telemetryScopeJson }}
          getEnvironments: ${{ github.event.inputs.environmentName }}
          includeProduction: 'Y'

  Deploy:
    needs: [ Initialization ]
    if: ${{ needs.Initialization.outputs.environmentCount > 0 }}
    strategy: ${{ fromJson(needs.Initialization.outputs.environments) }}
    runs-on: ${{ fromJson(matrix.os) }}
    name: Deploy to ${{ matrix.environment }}
    environment:
      name: ${{ matrix.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: EnvName
        id: envName
        run: |
          $ErrorActionPreference = "STOP"
          Set-StrictMode -version 2.0
          $envName = '${{ matrix.environment }}'.split(' ')[0]
          Add-Content -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read settings
        uses: BusinessCentralDemos/AL-Go-Actions/ReadSettings@PowerPlatform
        with:
          shell: powershell

      - name: Read secrets
        uses: BusinessCentralDemos/AL-Go-Actions/ReadSecrets@PowerPlatform
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          shell: powershell
          settingsJson: ${{ env.Settings }}
          secrets: '${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext,${{ steps.envName.outputs.envName }}-EnvironmentName,${{ steps.envName.outputs.envName }}_EnvironmentName,EnvironmentName,projects'

      - name: AuthContext
        id: authContext
        run: |
               $ErrorActionPreference = "STOP"
                Set-StrictMode -version 2.0
                $envName = '${{ steps.envName.outputs.envName }}'
                $deployToSettingStr = [System.Environment]::GetEnvironmentVariable("DeployTo$envName")
                if ($deployToSettingStr) {
                  $deployToSettings = $deployToSettingStr | ConvertFrom-Json
                }
                else {
                  $deployToSettings = [PSCustomObject]@{}
                }
                $authContext = $null
                "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
                  if (!($authContext)) {
                    $authContext = [System.Environment]::GetEnvironmentVariable($_)
                    if ($authContext) {
                      Write-Host "Using $_ secret as AuthContext"
                    }
                  }            
                }
                if (!($authContext)) {
                  Write-Host "::Error::No AuthContext provided"
                  exit 1
                }
                if (("$deployToSettings" -ne "") -and $deployToSettings.PSObject.Properties.name -eq "EnvironmentName") {
                  $environmentName = $deployToSettings.environmentName
                }
                else {
                  $environmentName = $null
                  "$($envName)-EnvironmentName", "$($envName)_EnvironmentName", "EnvironmentName" | ForEach-Object {
                    if (!($EnvironmentName)) {
                      $EnvironmentName = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String([System.Environment]::GetEnvironmentVariable($_)))
                      if ($EnvironmentName) {
                        Write-Host "Using $_ secret as EnvironmentName"
                        Write-Host "Please consider using the DeployTo$_ setting instead, where you can specify EnvironmentName, projects and branches"
                      }
                    }            
                  }
                  if (!($environmentName)) {
                    $environmentName = '${{ steps.envName.outputs.envName }}'
                  }
                  $deployToSettings | Add-Member -MemberType NoteProperty -name 'environmentName' -value $environmentName
                }
                $environmentName = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(($environmentName + '${{ matrix.environment }}'.SubString($envName.Length)).ToUpperInvariant()))
                if (("$deployToSettings" -ne "") -and $deployToSettings.PSObject.Properties.name -eq "projects") {
                  $projects = $deployToSettings.projects
                }
                else {
                  $projects = [System.Environment]::GetEnvironmentVariable("$($envName)-projects")
                  if (-not $projects) {
                    $projects = [System.Environment]::GetEnvironmentVariable("$($envName)_Projects")
                    if (-not $projects) {
                      $projects = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String([System.Environment]::GetEnvironmentVariable('projects')))
                    }
                  }
                  $deployToSettings | Add-Member -MemberType NoteProperty -Name 'projects' -Value $projects
                }
                $powerPlatformSolutionFolder = [System.Environment]::GetEnvironmentVariable('PowerPlatformSolutionFolder')
                $deployPP = $false
                if ($projects -eq '' -or $projects -eq '*') {
                  $projects = '*'
                  $deployPP = ("$powerPlatformSolutionFolder" -ne "")
                }
                else {
                  $buildProjects = '${{ needs.Initialization.outputs.projects }}' | ConvertFrom-Json
                  $projects = ($projects.Split(',') | Where-Object { 
                    $deployALProject = $buildProjects -contains $_
                    if ($_ -eq $powerPlatformSolutionFolder) {
                      $deployPP = $true
                      $deployALProject = $false
                    }
                    $deployALProject
                  }) -join ','
                }

                Add-Content -Path $env:GITHUB_OUTPUT -Value "authContext=$authContext"
                Write-Host "authContext=$authContext"
                Add-Content -Path $env:GITHUB_OUTPUT -Value "deployTo=$($deployToSettings | ConvertTo-Json -depth 99 -compress)"
                Add-Content -Path $env:GITHUB_OUTPUT -Value "environmentName=$environmentName"
                Write-Host "environmentName=$([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($environmentName)))"
                Write-Host "environmentName (as Base64)=$environmentName"
                Add-Content -Path $env:GITHUB_OUTPUT -Value "projects=$projects"
                Write-Host "projects=$projects"
                Add-Content -Path $env:GITHUB_OUTPUT -Value "deployPP=$deployPP"
                Write-Host "deployPP=$deployPP"
            
      - name: Get Artifacts
        uses: BusinessCentralDemos/AL-Go-Actions/GetArtifacts@PowerPlatform
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          type: 'Publish'
          projects: ${{ steps.authContext.outputs.projects }}
          environmentName: ${{ steps.authContext.outputs.environmentName }}
          artifactVersion: ${{ github.event.inputs.appVersion }}

      - name: Deploy PowerPlatform
        if: ${{ steps.authContext.outputs.deployPP == 'true' }}
        uses: BusinessCentralDemos/AL-Go-Actions/DeployPowerPlatform@PowerPlatform
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          artifactPath: '.artifacts'
          deploySettings: ${{ steps.authContext.outputs.deployTo }} 
          authSettings: ${{ steps.authContext.outputs.authContext }}

      - name: Deploy AL
        uses: BusinessCentralDemos/AL-Go-Actions/Deploy@PowerPlatform
        env:
          AuthContext: ${{ steps.authContext.outputs.authContext }}
        with:
          shell: powershell
          parentTelemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
          type: 'Publish'
          projects: ${{ steps.authContext.outputs.projects }}
          environmentName: ${{ steps.authContext.outputs.environmentName }}
          artifacts: ${{ github.event.inputs.appVersion }}

  PostProcess:
    if: always()
    runs-on: [ windows-latest ]
    needs: [ Initialization, Deploy ]
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Finalize the workflow
        id: PostProcess
        uses: BusinessCentralDemos/AL-Go-Actions/WorkflowPostProcess@PowerPlatform
        with:
          shell: powershell
          eventId: "DO0097"
          telemetryScopeJson: ${{ needs.Initialization.outputs.telemetryScopeJson }}
