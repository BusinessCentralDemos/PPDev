name: " Get Power Platform changes"

on:
  workflow_dispatch:
    inputs:
      solutionName:
        description: "Solution Name"
        required: true
        default: "PPSolution"
      environment:
        description: "Environment"
        required: true
        default: "QA"
      directCommit:
        description: Direct COMMIT (Y/N)
        required: false
        default: "N"

permissions:
  contents: write
  pull-requests: write

defaults:
  run:
    shell: powershell

jobs:
  PullChanges:
    runs-on: [windows-latest]
    name: Pull changes from ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Initialize the workflow
        id: init
        uses: BusinessCentralDemos/AL-Go-Actions/WorkflowInitialize@PowerPlatform
        with:
          shell: powershell
          eventId: "DO0091"

      - name: EnvName
        id: envName
        shell: powershell
        run: |
          $ErrorActionPreference = "STOP"
          Set-StrictMode -version 2.0
          $envName = '${{ inputs.environment }}'
          Add-Content -Path $env:GITHUB_OUTPUT -Value "envName=$envName"

      - name: Read settings
        uses: BusinessCentralDemos/AL-Go-Actions/ReadSettings@PowerPlatform
        with:
          shell: powershell

      - name: Read secrets
        uses: BusinessCentralDemos/AL-Go-Actions/ReadSecrets@PowerPlatform
        env:
          secrets: ${{ toJson(secrets) }}
        with:
          shell: powershell
          settingsJson: ${{ env.Settings }}
          secrets: "${{ steps.envName.outputs.envName }}-AuthContext,${{ steps.envName.outputs.envName }}_AuthContext,AuthContext,${{ steps.envName.outputs.envName }}-EnvironmentName,${{ steps.envName.outputs.envName }}_EnvironmentName,EnvironmentName,projects"

      - name: AuthContext
        id: authContext
        shell: powershell
        run: |
          $ErrorActionPreference = "STOP"
          Set-StrictMode -version 2.0
          $envName = '${{ steps.envName.outputs.envName }}'
          $deployToSettingStr = [System.Environment]::GetEnvironmentVariable("DeployTo$envName")
          if ($deployToSettingStr) {
            $deployToSettings = $deployToSettingStr | ConvertFrom-Json
          }
          else {
            $deployToSettings = [PSCustomObject]@{}
          }
          $authContext = $null
          "$($envName)-AuthContext", "$($envName)_AuthContext", "AuthContext" | ForEach-Object {
            if (!($authContext)) {
              $authContext = [System.Environment]::GetEnvironmentVariable($_)
              if ($authContext) {
                Write-Host "Using $_ secret as AuthContext"
              }
            }            
          }
          if (!($authContext)) {
            Write-Host "::Error::No AuthContext provided"
            exit 1
          }
          if (("$deployToSettings" -ne "") -and $deployToSettings.PSObject.Properties.name -eq "EnvironmentName") {
            $environmentName = $deployToSettings.environmentName
          }
          else {
            $environmentName = $null
            "$($envName)-EnvironmentName", "$($envName)_EnvironmentName", "EnvironmentName" | ForEach-Object {
              if (!($EnvironmentName)) {
                $EnvironmentName = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String([System.Environment]::GetEnvironmentVariable($_)))
                if ($EnvironmentName) {
                  Write-Host "Using $_ secret as EnvironmentName"
                  Write-Host "Please consider using the DeployTo$_ setting instead, where you can specify EnvironmentName, projects and branches"
                }
              }            
            }
            if (!($environmentName)) {
              $environmentName = '${{ steps.envName.outputs.envName }}'
            }
            $deployToSettings | Add-Member -MemberType NoteProperty -name 'environmentName' -value $environmentName
          }
          $environmentName = [Convert]::ToBase64String([System.Text.Encoding]::UTF8.GetBytes(($environmentName + '${{ inputs.environment }}'.SubString($envName.Length)).ToUpperInvariant()))
          if (("$deployToSettings" -ne "") -and $deployToSettings.PSObject.Properties.name -eq "projects") {
            $projects = $deployToSettings.projects
          }
          else {
            $projects = [System.Environment]::GetEnvironmentVariable("$($envName)-projects")
            if (-not $projects) {
              $projects = [System.Environment]::GetEnvironmentVariable("$($envName)_Projects")
              if (-not $projects) {
                $projects = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String([System.Environment]::GetEnvironmentVariable('projects')))
              }
            }
            $deployToSettings | Add-Member -MemberType NoteProperty -Name 'projects' -Value $projects
          }
          $powerPlatformSolutionFolder = [System.Environment]::GetEnvironmentVariable('PowerPlatformSolutionFolder')
          $deployPP = $false
          if ($projects -eq '' -or $projects -eq '*') {
            $projects = '*'
            $deployPP = ("$powerPlatformSolutionFolder" -ne "")
          }
          else {
            $buildProjects = '${{ needs.Initialization.outputs.projects }}' | ConvertFrom-Json
            $projects = ($projects.Split(',') | Where-Object { 
              $deployALProject = $buildProjects -contains $_
              if ($_ -eq $powerPlatformSolutionFolder) {
                $deployPP = $true
                $deployALProject = $false
              }
              $deployALProject
            }) -join ','
          }

          Add-Content -Path $env:GITHUB_OUTPUT -Value "authContext=$authContext"
          Write-Host "authContext=$authContext"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "deployToSettings=$($deployToSettings | ConvertTo-Json -depth 99 -compress)"
          Write-Host "deployToSettings=$deployToSettings"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "environmentName=$environmentName"
          Write-Host "environmentName=$([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($environmentName)))"
          Write-Host "environmentName (as Base64)=$environmentName"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "projects=$projects"
          Write-Host "projects=$projects"
          Add-Content -Path $env:GITHUB_OUTPUT -Value "deployPP=$deployPP"
          Write-Host "deployPP=$deployPP"

      - name: test input
        shell: powershell
        run: |
          Write-Host "Deploy settings: ${{ steps.AuthContext.outputs.deployToSettings }}";
          Write-Host "Auth settings: ${{ steps.AuthContext.outputs.authContext }}";

      - name: Parse deployTo JSON
        shell: powershell
        run: |
          $json = '${{ steps.AuthContext.outputs.deployToSettings }}'
          $obj = ConvertFrom-Json $json
          Write-Output $obj.environmentName
          $environmentName = $obj.environmentName;
          echo "environmentName=$environmentName" >> $env:GITHUB_ENV
          Write-Output $obj.'environment-url'
          $environmentUrl = $obj.'environment-url';
          echo "environmentUrl=$environmentUrl" >> $env:GITHUB_ENV
          Write-Output $obj.bcEnvironment
          $bcEnvironment = $obj.bcEnvironment;
          echo "bcEnvironment=$bcEnvironment" >> $env:GITHUB_ENV
          write-output $obj.bcCompanyId
          $bcCompanyId = $obj.bcCompanyId;
          echo "bcCompanyId=$bcCompanyId" >> $env:GITHUB_ENV

      - name: Parse auth context
        shell: powershell
        run: |
          $authContext = [System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('${{ steps.AuthContext.outputs.authContext }}'))
          $obj = ConvertFrom-Json $authContext
          $userName = $obj.userName;
          Write-Output "userName=$userName"
          echo "userName=$userName" >> $env:GITHUB_ENV
          $password = $obj.password;
          Write-Output "password=$password"
          echo "password=$password" >> $env:GITHUB_ENV
    
      - name: Who am I
        uses: microsoft/powerplatform-actions/who-am-i@v0
        with:
          user-name: ${{env.userName}}
          password-secret: ${{env.password}}
          environment-url: ${{env.environmentUrl}}